#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

###################################
#   Created By Stuart King.                                    
#   IBM Planning Analyics Offering Manager         
#   stuart.king@ca.ibm.com
#   December 2018
###################################

vNow = NumberToString( NOW );

sourceViewName = '}temp_' | pElementName;
IF ( ViewExists ( pCubeName, sourceViewName ) = 1 );
    ViewDestroy ( pCubeName, sourceViewName );
ENDIF; 
ViewCreate ( pCubeName, sourceViewName, 1 );

i = 1;
dimensionName = TABDIM ( pCubeName, i );
WHILE ( dimensionName @<> '' );
   i = i + 1;
   dimensionName = TABDIM ( pCubeName, i );
   IF ( dimensionName @<> '' );
   ENDIF;
END;

dimensionCount = i - 1;
i = 1;
currentDim = TABDIM ( pCubeName, i );
WHILE ( currentDim @<> '' );
    subsetName = '}temp_' | currentDim | '_' | pElementName | '_' | vNow;
    ViewRowDimensionSet ( pCubeName, sourceViewName, currentDim, i );
     IF ( currentDim  @= pSplitDimension);
         IF (SubsetExists ( currentDim, subsetName ) = 1 );
            SubsetDestroy ( currentDim, subsetName ); 
          ENDIF;
          SubsetCreate ( currentDim, subsetName, 1 );
          SubsetElementInsert (  currentDim, subsetName, pElementName, 1 );
          ViewSubsetAssign ( pCubeName, sourceViewName, currentDim, subsetName );
       ELSE;
           IF (SubsetExists ( currentDim, subsetName ) = 1 );
	SubsetDestroy ( currentDim, subsetName ); 
	  ENDIF;
	  SubsetCreate ( currentDim, subsetName, 1 );
	   j = 1;
	  WHILE ( j <= DIMSIZ ( currentDim ) );
	      currentElement = DIMNM ( currentDim, j );
	      IF ( ELLEV (currentDim, currentElement ) = 0);
	          SubsetElementInsert (  currentDim, subsetName, currentElement, SubsetGetSize ( currentDim, subsetName ) + 1 );
	      ENDIF;
	       j = j + 1;
	   END; 
	   ViewSubsetAssign ( pCubeName, sourceViewName, currentDim, subsetName );
	ENDIF;
           i = i + 1;
          currentDim = TABDIM ( pCubeName, i );
       END;

fullFileName = pExportDir | pElementName | '.csv';

ViewExtractSkipZeroesSet ( pCubeName, sourceViewName, 0 );
ViewExtractSkipCalcsSet ( pCubeName, sourceViewName, 1);
ViewConstruct ( pCubeName, sourceViewName );

DataSourceType='VIEW';
DatasourceNameForServer=pCubeName;
DatasourceCubeview=sourceViewName;

DatasourceASCIIQuoteCharacter='';
DatasourceASCIIDelimiter=Char(9);
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

inputVal = RAND * 100;

IF ( dimensionCount = 2 );
   ASCIIOUTPUT ( fullFileName, dim1, dim2, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 3 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 4 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 5 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 6 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 7 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 8 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 9 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 10);
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 11 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 12 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 13 );
    ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 14);
   ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 15 );
   ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, dim15, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 16 );
   ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, dim15, dim16, NumberToString(inputVal) );
ELSEIF ( dimensionCount = 17 );
  ASCIIOUTPUT ( fullFileName, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, dim15, dim16, dim17, NumberToString(inputVal) );
ENDIF;



#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


IF ( pClearPostExport @= 'Y');
   ViewZeroOut ( pCubeName, sourceViewName );
ENDIF;

IF ( pImport @= 'Y' );
   ExecuteProcess ( 'Diag.Parallel.Import', 'pCubeName', pCubeName, 'pFileName', fullFileName, 'pElementName', pElementName );
ELSE;
   queueDir = CellGetS ( 'diag.control.cube', 'queue directory', 'value' );
   ASCIIOUTPUT ( queueDir | pElementName | '.done', pElementName );
ENDIF;
#endregion